# -----------------------
# Builder stage: PHP CLI + Composer
# -----------------------
FROM php:8.3-cli AS builder

# Install composer and extensions needed for dependency installation
RUN apt-get update && apt-get install -y \
    libzip-dev \
    libpng-dev \
    unzip \
    git \
    && docker-php-ext-install -j$(nproc) \
    bcmath \
    gd \
    zip \
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

WORKDIR /app

# Copy the entire source code for proper installation
COPY api/ .

# Install dependencies including dev dependencies
RUN composer install --optimize-autoloader --no-interaction \
    --ignore-platform-req=php \
    --ignore-platform-req=ext-bcmath \
    --ignore-platform-req=ext-gd
# -----------------------
# Final production stage
# -----------------------
FROM php:8.3-fpm-alpine

# Accept version build argument
ARG APP_VERSION=unknown

# Install runtime dependencies
RUN apk add --no-cache \
    libzip \
    libpng \
    postgresql-client \
    libpq \
    procps \
    unzip \
    bash \
    icu-libs \
    nginx \
    supervisor \
    && rm -rf /var/cache/apk/*

# Install build dependencies and PHP extensions
RUN apk add --no-cache --virtual .build-deps \
    $PHPIZE_DEPS \
    libzip-dev \
    libpng-dev \
    postgresql-dev \
    oniguruma-dev \
    icu-dev \
    && docker-php-ext-configure pgsql \
    && docker-php-ext-configure gd \
    && docker-php-ext-install -j$(nproc) \
    pdo \
    zip \
    gd \
    pgsql \
    pdo_pgsql \
    bcmath \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && apk del .build-deps

# Set working directory
WORKDIR /var/www/html



# Copy PHP extensions from builder (compiled extensions)
COPY --from=builder /usr/local/lib/php/extensions /usr/local/lib/php/extensions
COPY --from=builder /usr/local/etc/php/conf.d /usr/local/etc/php/conf.d

# Copy Composer vendor folder
COPY --from=builder /app/vendor ./vendor
COPY --from=builder /app/ .

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# Copy Supervisor + Nginx config + startup script
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/start.sh /start.sh
RUN chmod +x /start.sh

# Expose HTTP port
EXPOSE 80

# Start everything via start.sh
CMD ["/start.sh"]
