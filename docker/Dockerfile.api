# -----------------------
# Builder stage: PHP CLI + Composer
# -----------------------
FROM php:8.4-cli-alpine AS builder

WORKDIR /app

# 1. Install build dependencies separately
RUN apk add --no-cache \
    bash \
    git \
    unzip \
    autoconf \
    g++ \
    make \
    libzip-dev \
    libpng-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    icu-dev \
    oniguruma-dev \
    postgresql-dev

# 2. Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
    gd \
    zip \
    intl \
    mbstring \
    pdo_pgsql \
    pgsql \
    bcmath \
    pcntl \
    exif \
    opcache \
    xml

# 3. Install Redis via PECL
RUN apk add --no-cache autoconf g++ make \
    && pecl install redis \
    && docker-php-ext-enable redis

# 4. Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# 5. Copy application and install dependencies
COPY api/ .
ENV COMPOSER_MEMORY_LIMIT=-1
RUN composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
# -----------------------
# Final production stage
# -----------------------
FROM php:8.4-fpm-alpine

# Set working directory
WORKDIR /var/www/html

# Install runtime dependencies
RUN apk add --no-cache \
    bash \
    curl \
    git \
    unzip \
    zip \
    libpng \
    freetype \
    libjpeg-turbo \
    icu-libs \
    oniguruma \
    postgresql-client \
    supervisor \
    nginx

# Copy PHP extensions from builder (compiled extensions)
COPY --from=builder /usr/local/lib/php/extensions /usr/local/lib/php/extensions
COPY --from=builder /usr/local/etc/php/conf.d /usr/local/etc/php/conf.d

# Copy Composer vendor folder
COPY --from=builder /app/vendor ./vendor
COPY --from=builder /app/ .

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# Copy Supervisor + Nginx config + startup script
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/start.sh /start.sh
RUN chmod +x /start.sh

# Expose HTTP port
EXPOSE 80

# Start everything via start.sh
CMD ["/start.sh"]
